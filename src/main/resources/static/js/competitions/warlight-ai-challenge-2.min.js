function getParameterByName(name, url) {
            if (!url) {
              url = window.location.href;
            }
            name = name.replace(/[\[\]]/g, "\\$&");
            var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
                results = regex.exec(url);
            if (!results) return null;
            if (!results[2]) return '';
            return decodeURIComponent(results[2].replace(/\+/g, " "));
        }

(function(a, m) {
    a.setNamespace("app.competitions.warlight-ai-challenge-2").MoveType = {
        ATTACK: "attack/transfer",
        ILLEGAL: "illegal_move",
        PLACE: "place_armies",
        TRANSFER: "transfer"
    }
})(window);
(function(a, m) {
    a.setNamespace("app.competitions.warlight-ai-challenge-2").RegionStatus = {
        NEUTRAL: "neutral",
        PLAYER_1: "player1",
        PLAYER_2: "player2",
        UNKNOWN: "unknown"
    }
})(window);
(function(a, m) {
    var b = a.setNamespace("app.competitions.warlight-ai-challenge-2"),
        e;
    e = function(a, f) {
        if (!1 === this instanceof e) return new e(a, f);
        this.x = a;
        this.y = f;
        this.cells = [];
        this.distortCoordinates(5)
    };
    e.prototype.distortCoordinates = function(a) {
        var f;
        f = Math.floor(Math.random() * (2 * a + 1)) - a;
        this.distortedX = this.x + f;
        f = Math.floor(Math.random() * (2 * a + 1)) - a;
        this.distortedY = this.y + f
    };
    e.prototype.toPathString = function(a) {
        return a ? this.distortedX + "," + this.distortedY + " L" : this.x + "," + this.y + " L"
    };
    b.Point = e
})(window);
(function(a, m, b, e) {
    m = a.setNamespace("app.competitions.warlight-ai-challenge-2");
    var g = a.setNamespace("app.competitions.warlight-ai-challenge-2.Point"),
        f;
    f = function(d, a, b) {
        if (!1 === this instanceof f) return new f(d, a, b);
        this.x = a;
        this.y = b;
        this.coordinates = d;
        this.points = [];
        this.neighbors = []
    };
    f.prototype.drawCell = function(d, a) {
        var f = "M";
        b.each(this.points, function(d, b) {
            f += b.toPathString(a)
        });
        f = f.slice(0, -1);
        f += "Z";
        this.drawnObject = d.path(f);
        this.drawnObject.attr({
            fill: "#8FCFF7",
            "stroke-width": 0
        });
        b(this.drawnObject.node).attr("id",
            "l" + this.x + "c" + this.y)
    };
    f.prototype.addPoints = function() {
        var d, f, a, b;
        for (d = 0; 6 > d; d++) f = (d + 1) % 6, a = (d + 5) % 6, this.neighbors[d] !== e ? (a = this.neighbors[d].points[(d + 4) % 6], b = this.neighbors[d].points[(f + 2) % 6], a.cells.push(this), b.cells.push(this), this.points[d] = a, this.points[f] = b) : this.neighbors[a] === e && this.points[d] === e && (a = new g(this.coordinates[d].x, this.coordinates[d].y), a.cells.push(this), this.points[d] = a)
    };
    f.prototype.addNeighbor = function(d, a) {
        d !== e && (this.neighbors[a] = d, d.neighbors[(a + 3) % 6] = this)
    };
    f.prototype.getRandomNeighborForIsland = function() {
        this.unUsedNeighbors === e && (this.unUsedNeighbors = this.neighbors.slice());
        return this.getRandomNeighbor(this.unUsedNeighbors)
    };
    f.prototype.getRandomNeighborForRegion = function() {
        var d = this.island,
            a = [];
        this.islandNeighbors === e && (b.each(this.neighbors, function(f, b) {
            b !== e && d === b.island && a.push(b)
        }), this.islandNeighbors = a);
        return this.getRandomNeighbor(this.islandNeighbors)
    };
    f.prototype.getRandomNeighbor = function(a) {
        var f, b;
        if (0 < a.length) return f = Math.floor(Math.random() *
            a.length), b = a[f], a.splice(f, 1), b
    };
    f.prototype.findNeighboringRegions = function() {
        var a = [],
            f = this.region;
        b.each(this.neighbors, function(b, g) {
            g !== e && g.region !== e && g.region !== f && -1 === a.indexOf(g.region) && a.push(g.region)
        });
        return a
    };
    f.prototype.setRegion = function(a) {
        this.region = a;
        this.drawnObject !== e && b(this.drawnObject.node).attr("class", "region" + a.id)
    };
    f.prototype.getDistanceToCell = function(a) {
        var f = this.y - a.y;
        return Math.sqrt(Math.pow(this.x - a.x, 2) + Math.pow(f, 2))
    };
    f.prototype.getMiddlePoint = function() {
        var a =
            0,
            f = 0;
        b.each(this.coordinates, function(b, e) {
            a += e.x;
            f += e.y
        });
        this.pathPoint = {
            x: Math.floor(a / this.coordinates.length),
            y: Math.floor(f / this.coordinates.length)
        }
    };
    m.Cell = f
})(window, window.Raphael, window.jQuery);
(function(a, m, b, e) {
    a = a.setNamespace("app.competitions.warlight-ai-challenge-2");
    var g;
    g = function(a) {
        if (!1 === this instanceof g) return new g(a);
        this.id = a;
        this.points = [];
        this.cells = [];
        this.regions = []
    };
    g.prototype.getProperties = function() {
        var a = [],
            d = {};
        d.id = this.id;
        d.bonus = this.bonus;
        d.island = this.island.id;
        b.each(this.regions, function(d, b) {
            a.push(b.id)
        });
        d.regions = a;
        d.text = this.bonusTextPosition;
        return d
    };
    g.prototype.drawObject = function(a, d, e, g) {
        var r, l, s, c, p, k = -1,
            h = this,
            n = "M";
        b.each(this.cells, function(a,
            n) {
            b.each(n.points, function(a, n) {
                s = 0;
                b.each(n.cells, function(k, a) {
                    a.superRegion === h && (c = a, s++)
                });
                1 === s && c.y > k && (r = n, l = c, k = l.y)
            })
        });
        for (n += r.toPathString(d); - 1 === this.points.indexOf(r);) b.each(r.cells, function(k, c) {
            if (c.superRegion === h && c !== l) return l = c, !1
        }), p = l.points.indexOf(r), p = l.points[(p + 1) % 6], n += p.toPathString(d), this.points.push(r), r = p;
        n = n.slice(0, -1);
        this.drawnObject = a.path(n + "Z");
        this.drawnObject.attr({
            "stroke-width": 5,
            fill: "rgba(0, 0, 0, 0)"
        });
        this.drawnObject.transform("t" + e + "," + g);
        b(this.drawnObject.node).attr("id",
            "superRegion" + this.id)
    };
    g.prototype.drawBonusText = function(a, d, e) {
        this.textObject = a.text(this.bonusTextPosition.x + d, this.bonusTextPosition.y + e, this.bonus).attr({
            "font-size": 30,
            "font-weight": "bold",
            opacity: 0
        });
        b(this.textObject.node).attr({
            id: "superRegion" + this.id + "Text",
            "class": "superRegionText"
        })
    };
    a.SuperRegion = g
})(window, window.Raphael, window.jQuery);
(function(a, m, b, e) {
    m = a.setNamespace("app.competitions.warlight-ai-challenge-2");
    a.setNamespace("app.competitions.warlight-ai-challenge-2.SuperRegion");
    var g;
    g = function(a) {
        if (!1 === this instanceof g) return new g(a);
        this.id = a;
        this.points = [];
        this.cells = [];
        this.neighbors = []
    };
    g.prototype.getProperties = function() {
        var a = [],
            d = [],
            e = {};
        e.id = this.id;
        e.island = this.island.id;
        b.each(this.cells, function(d, b) {
            a.push({
                x: b.x,
                y: b.y
            })
        });
        e.cells = a;
        b.each(this.neighbors, function(a, f) {
            d.push(f.id)
        });
        e.neighbors = d;
        e.text =
            this.armiesTextPosition;
        return e
    };
    g.prototype.drawObject = function(a, d, g, m, r) {
        var l, s, c, p, k, h = this,
            n = "M";
        b.each(this.cells, function(k, a) {
            b.each(a.points, function(k, a) {
                c = 0;
                b.each(a.cells, function(k, a) {
                    a.region === h && (p = a, c++)
                });
                if (1 === c) return l = a, s = p, !1
            });
            if (l !== e) return !1
        });
        for (n += l.toPathString(d); - 1 === this.points.indexOf(l);) b.each(l.cells, function(a, k) {
            if (k.region === h && k !== s) return s = k, !1
        }), k = s.points.indexOf(l), k = s.points[(k + 1) % 6], n += k.toPathString(d), this.points.push(l), l = k;
        n = n.slice(0, -1);
        this.drawnObject =
            a.path(n + "Z");
        this.drawnObject.attr({
            fill: r,
            "stroke-width": 1
        });
        this.drawnObject.transform("t" + g + "," + m);
        b(this.drawnObject.node).attr("class", "region" + this.id + " superRegion" + this.superRegion.id)
    };
    g.prototype.drawOverlay = function(a, d, e) {
        this.overlayObject = a.path(this.drawnObject.attrs.path);
        this.overlayObject.attr({
            fill: "black",
            opacity: 0
        });
        this.overlayObject.transform("t" + d + "," + e);
        b(this.overlayObject.node).css("cursor", "pointer");
        return this.overlayObject
    };
    g.prototype.drawShadow = function(a, b, e) {
        a =
            a.path(this.drawnObject.attrs.path);
        a.attr({
            fill: "rgb(132, 208, 208)",
            stroke: "none"
        });
        a.transform("t" + (b + 10) + "," + (e + 6));
        a.toBack()
    };
    g.prototype.setHover = function(a, d) {
        var g = this;
        this.overlayObject.hover(function(b) {
            clearTimeout(a.outTimer);
            a.inTimer = setTimeout(function() {
                g.hoverIn(d);
                a.outRegion !== e && a.outRegion !== g && (a.outRegion.superRegion.id === g.superRegion.id ? a.outRegion.hoverOut(!1, d) : a.outRegion.hoverOut(!0, d));
                a.outRegion = g
            }, 50)
        }, function() {
            clearTimeout(a.inTimer);
            a.outTimer = setTimeout(function() {
                a.outRegion !==
                    e && (a.outRegion.hoverOut(!0, d), 0 === b("#game-teaser").length && b("div.tooltip").css({
                        display: "none"
                    }))
            }, 50)
        })
    };
    g.prototype.hoverIn = function(a) {
        this.overlayObject.attr({
            opacity: 0.1
        });
        this.superRegion.drawnObject.attr({
            "stroke-width": 7,
            fill: "rgba(0, 0, 0, 0.1)"
        });
        0 === b("#game-teaser").length && (b("div.tooltip").text("Region\u00a0" + this.id), b("div.tooltip").css({
            display: "initial"
        }))
    };
    g.prototype.hoverOut = function(a, b) {
        this.overlayObject.attr({
            opacity: 0
        });
        a && !0 !== this.superRegion.clicked && (this.superRegion.drawnObject.attr({
            "stroke-width": 5,
            fill: "rgba(0, 0, 0, 0)"
        }), b[1][this.superRegion.id - 1].attr({
            "font-weight": "normal"
        }))
    };
    g.prototype.setClick = function(a, b) {
        var e = this.superRegion;
        this.overlayObject.click(function() {
            b();
            e.drawnObject.attr({
                "stroke-width": 7,
                fill: "rgba(0, 0, 0, 0.1)"
            });
            a[1][e.id - 1].attr({
                "font-weight": "bold"
            });
            a.show();
            a.toFront();
            e.clicked = !0
        })
    };
    g.prototype.setSuperRegion = function(a) {
        this.superRegion = a;
        b.each(this.cells, function(b, e) {
            e.superRegion = a
        })
    };
    g.prototype.drawArmiesText = function(a, e, g) {
        this.textObject = a.text(this.armiesTextPosition.x +
            e, this.armiesTextPosition.y + g, "2").attr({
            "font-size": 18,
            "font-weight": "bold",
            "font-family": "Exo"
        });
        this.textObject.attr("text", "");
        b(this.textObject.node).attr({
            id: "region" + this.id + "Text",
            "class": "regionText"
        })
    };
    g.prototype.setColor = function(a) {
        this.drawnObject !== e && this.drawnObject.attr("fill", a)
    };
    g.prototype.setArmiesText = function(a) {
        this.textObject !== e && ("0" === a && (a = ""), this.textObject.attr("text", a))
    };
    m.Region = g
})(window, window.Raphael, window.jQuery);
(function(a, m, b) {
    a = a.setNamespace("app.competitions.warlight-ai-challenge-2");
    var e;
    e = function(a) {
        if (!1 === this instanceof e) return new e(a);
        this.id = a;
        this.cells = [];
        this.regions = [];
        this.superRegions = []
    };
    e.prototype.getProperties = function() {
        return {
            id: this.id
        }
    };
    a.Island = e
})(window, window.jQuery);
(function(a, m, b, e, g) {
    var f = a.setNamespace("app.competitions.warlight-ai-challenge-2"),
        d = a.setNamespace("app.competitions.warlight-ai-challenge-2.Cell"),
        q = a.setNamespace("app.competitions.warlight-ai-challenge-2.Island"),
        t = a.setNamespace("app.competitions.warlight-ai-challenge-2.Region"),
        r = a.setNamespace("app.competitions.warlight-ai-challenge-2.SuperRegion");
    a.setNamespace("app.competitions.warlight-ai-challenge-2.Player");
    var l;
    l = function(a, c, b, k, h, n) {
        if (!1 === this instanceof l) return new l(a, c, b,
            k, h, n);
        this.pixelsX = a;
        this.pixelsY = c;
        this.offSetX = b;
        this.offSetY = k;
        this.distorted = h;
        this.colors = n;
        this.round = 0
    };
    l.prototype.loadMap = function(b) {
        //var mapIndex = getParameterByName("map");
        var mapIndex = getParameterByName("data-file").split("-")[2];
        var c = /*a.location.href+*/ "/mapdata" + mapIndex;
        if ("" !== b) c = "http://" + a.location.hostname + "/competitions/warlight-ai-challenge/games/" + b + "/mapdata";
        else if (7 > a.location.href.split("/").length) {
            console.log("Cannot find map for competition homepage");
            f.release();
            return
        }
        var d = a.curry(this.handleMapLoaded, this);
        e.get(c, function(a) {
            d([a])
        }).fail(function(a, c, n) {
            console.log("map data failed to load!");
            console.log(n)
        })
    };
    l.prototype.handleMapLoaded = function(a) {
        this.parseMapFile(a);
        this.drawBackground();
        this.drawPaths();
        this.drawRegions();
        this.drawSuperRegions();
        e(this).trigger("mapLoadedEvent")
    };
    l.prototype.parseMapFile = function(a) {
        a = e.parseJSON(a);
        this.islands = [];
        this.regions = [];
        this.grid = [];
        this.paths = [];
        this.maxY = this.maxX = 0;
        this.canvas = null;
        console.log(JSON.stringify(a.Settings.mapSettings));
        this.maxX = a.Settings.gridSizeCells.x;
        this.maxY = a.Settings.gridSizeCells.y;
        this.grid = Array(this.maxY);
        this.paths = [];
        this.canvas = b("gridmap", this.pixelsX, this.pixelsY);
        this.makeGrid();
        this.loadIslands(a.Islands);
        this.regions = this.loadRegions(a.Regions);
        this.superRegions = this.loadSuperRegions(a.SuperRegions);
        this.superRegions.sort(function(a, b) {
            return a.id > b.id ? 1 : a.id < b.id ? -1 : 0
        });
        this.loadPaths(a.Paths)
    };
    l.prototype.loadIslands = function(a) {
        var c = [];
        e.each(a, function(a, k) {
            c.push(new q(k.id))
        });
        this.islands = c
    };
    l.prototype.loadRegions = function(a) {
        var c, b = [],
            k = this.islands,
            h = this.grid;
        e.each(a, function(a,
            d) {
            c = new t(d.id);
            b[d.id] = c;
            c.island = k[d.island];
            c.island.regions.push(c);
            c.armiesTextPosition = d.text;
            e.each(d.cells, function(a, k) {
                c.cells.push(h[k.y][k.x]);
                h[k.y][k.x].setRegion(c)
            })
        });
        e.each(a, function(a, k) {
            e.each(k.neighbors, function(a, c) {
                b[k.id].neighbors.push(b[c])
            })
        });
        return b
    };
    l.prototype.loadSuperRegions = function(a) {
        var c, b = this.islands,
            k = this.regions,
            h = [];
        e.each(a, function(a, d) {
            c = new r(d.id);
            c.island = b[d.island];
            c.island.superRegions.push(c);
            c.bonus = d.bonus;
            c.bonusTextPosition = d.text;
            h.push(c);
            e.each(d.regions, function(a, h) {
                c.regions.push(k[h]);
                k[h].setSuperRegion(c);
                c.cells = c.cells.concat(k[h].cells)
            })
        });
        return h
    };
    l.prototype.loadPaths = function(a) {
        var c, b = [],
            k = this.grid;
        e.each(a, function(a, n) {
            c = [];
            e.each(n.cells, function(a, h) {
                c.push(k[h.y][h.x])
            });
            b.push(c)
        });
        this.paths = b
    };
    l.prototype.makeGrid = function() {
        var a, c = [{
            x: 10,
            y: 0
        }, {
            x: 30,
            y: 0
        }, {
            x: 40,
            y: 17
        }, {
            x: 30,
            y: 34
        }, {
            x: 10,
            y: 34
        }, {
            x: 0,
            y: 17
        }];
        for (a = 0; a < this.maxY; a++) this.grid[a] = Array(this.maxX), this.makeHorizontalGridLine(c, a, this.maxY, 17)
    };
    l.prototype.makeHorizontalGridLine =
        function(a, c, b, k) {
            var h, n, f, g;
            for (h = 0; h < this.maxX; h++)
                if (g = [], c !== b - 1 || 1 !== h % 2) f = h % 2 * k, e.each(a, function(a, k) {
                    g.push({
                        x: k.x + 30 * h,
                        y: k.y + (34 * c + f)
                    })
                }), n = new d(g, h, c), 0 === h % 2 ? n.addNeighbor(this.grid[c][h - 1], 4) : n.addNeighbor(this.grid[c][h - 1], 5), 0 < c && (n.addNeighbor(this.grid[c - 1][h], 0), 0 === h % 2 && (n.addNeighbor(this.grid[c - 1][h + 1], 1), n.addNeighbor(this.grid[c - 1][h - 1], 5))), this.grid[c][h] = n, n.addPoints()
        };
    l.prototype.drawBackground = function() {
        var a, c = this,
            b = this.canvas.rect(0, 0, this.pixelsX, this.pixelsY),
            k = this.canvas.rect(0, this.pixelsY - 50, this.pixelsX, 50),
            h = this.canvas.set(),
            n = this.canvas.set();
        b.attr({
            fill: "rgb(255, 255, 255)",
            stroke: "none",
            opacity: 0
        });
        k.attr({
            fill: "rgba(0, 0, 0, 0.2)",
            stroke: "none"
        });
        this.roundNumber = this.canvas.text(this.pixelsX / 2, this.offSetY - 42, "Picking phase");
        this.gameEndText = this.canvas.text(this.pixelsX / 2, this.pixelsY / 2, "Game end!");
        this.overlay = this.canvas.rect(0, 0, this.pixelsX, this.pixelsY);
        this.playerName1 = this.canvas.text(this.offSetX + 25, 31, this.players[0].name);
        this.playerName2 =
            this.canvas.text(this.pixelsX - (this.offSetX + 15), 31, this.players[1].name);
        h.push(this.playerName1).push(this.playerName2);
        h.attr({
            fill: "rgb(255, 255, 255)",
            "font-family": "Exo",
            "font-size": "26px"
        });
        this.playerName1.attr({
            "text-anchor": "start"
        });
        this.playerName2.attr({
            "text-anchor": "end"
        });
        this.playerArmies1 = this.canvas.text(this.offSetX + 370, 35, "5 Armies/round");
        this.playerArmies2 = this.canvas.text(this.pixelsX - (this.offSetX + 360), 30, "5 Armies/round");
        this.playerArmies1.attr({
            "text-anchor": "start"
        });
        this.playerArmies2.attr({
            "text-anchor": "end"
        });
        n.push(this.playerArmies1).push(this.playerArmies2);
        n.attr({
            fill: "rgb(255, 255, 255)",
            "font-family": "Exo",
            "font-size": "17px"
        });
        this.makeLegend();
        a = this.legend;
        b.click(function() {
            a.hide();
            a.toBack();
            c.deselectAllSuperRegions()
        });
        this.overlay.attr({
            fill: "black",
            opacity: 0
        });
        this.roundNumber.attr({
            "font-family": "Exo",
            "font-size": "35px"
        });
        this.gameEndText.attr({
            "font-family": "Exo",
            "font-size": "72px",
            opacity: 0
        })
    };
    l.prototype.makeLegend = function() {
        var a, c, b = 0,
            k = this,
            h = this.canvas,
            n = h.set();
        e.each(this.superRegions,
            function(c, d) {
                a = h.text(0, b, "SuperRegion " + d.id + ", bonus " + d.bonus);
                e(a.node).css("cursor", "pointer");
                a.click(function() {
                    k.deselectAllSuperRegions();
                    d.drawnObject.attr({
                        "stroke-width": 7,
                        fill: "rgba(0, 0, 0, 0.1)"
                    });
                    d.clicked = !0;
                    this.attr({
                        "font-weight": "bold"
                    })
                });
                n.push(a);
                b += 30;
                e(a.node).attr("class", "superRegion" + d.id + "LegendText")
            });
        n.attr({
            "font-family": "Exo",
            "font-size": "22px",
            "text-anchor": "start"
        });
        n.transform("t35," + (this.pixelsY - (b + 67)));
        c = h.rect(15, this.pixelsY - (b + 102), e.fn.textWidth(e(a.node).text(),
            "Exo", "22px") + 35, b + 38);
        c.attr({
            fill: "rgba(255,255,255,0.6)",
            "stroke-width": 4,
            stroke: "black",
            "stroke-linejoin": "round"
        });
        n.toFront();
        this.legend = h.set().push(c, n);
        this.legend.hide()
    };
    e.fn.textWidth = function(a, c, b) {
        e.fn.textWidth.fakeEl || (e.fn.textWidth.fakeEl = e("<span>").hide().appendTo(m.body));
        e.fn.textWidth.fakeEl.text(a || this.val() || this.text()).css("font", c || this.css("font"));
        e.fn.textWidth.fakeEl.css("font-size", b);
        return e.fn.textWidth.fakeEl.width()
    };
    l.prototype.deselectAllSuperRegions = function() {
        this.legend.attr({
            "font-weight": "normal"
        });
        e.each(this.superRegions, function(a, c) {
            c.clicked = !1;
            c.drawnObject.attr({
                "stroke-width": 5,
                fill: "rgba(0, 0, 0, 0)"
            })
        })
    };
    l.prototype.drawCells = function() {
        var a, c, b;
        for (a = 0; a < this.maxY; a++)
            for (c = 0; c < this.maxX; c++) b = this.grid[a][c], b !== g && b.drawCell(this.canvas, this.distorted)
    };
    l.prototype.drawPaths = function() {
        var a, c, b, k = this.canvas,
            h = this;
        e.each(this.paths, function(n, d) {
            a = "M";
            e.each(d, function(k, c) {
                c.pathPoint === g && c.getMiddlePoint();
                0 < k && k < d.length - 1 && d[k - 1].y === c.y && d[k + 1].y === c.y && (d[k - 1].pathPoint ===
                    g && d[k - 1].getMiddlePoint(), c.pathPoint.y = d[k - 1].pathPoint.y);
                b = " S";
                0 !== k % 2 && (b = " ");
                1 === k % 2 && k === d.length - 1 && (b = " " + c.pathPoint.x + "," + c.pathPoint.y + " ");
                a += c.pathPoint.x + "," + c.pathPoint.y + b
            });
            a = a.slice(0, -1);
            c = k.path(a);
            c.attr({
                "stroke-width": 5,
                "stroke-dasharray": "-"
            });
            c.transform("t" + h.offSetX + "," + h.offSetY)
        })
    };
    l.prototype.drawRegions = function() {
        var b = this.canvas,
            c = this.distorted,
            d = this,
            k = a.curry(this.deselectAllSuperRegions, this);
        this.regionsOverlay = b.set();
        e.each(this.islands, function(a, n) {
            e.each(n.regions,
                function(a, h) {
                    h.drawObject(b, c, d.offSetX, d.offSetY, d.colors.neutral);
                    h.drawArmiesText(b, d.offSetX, d.offSetY);
                    d.regionsOverlay.push(h.drawOverlay(b, d.offSetX, d.offSetY));
                    h.drawShadow(b, d.offSetX, d.offSetY);
                    h.setHover(b, d.legend);
                    h.setClick(d.legend, k)
                })
        })
    };
    l.prototype.drawSuperRegions = function() {
        var a = this.canvas,
            c = this.distorted,
            b = this;
        e.each(this.islands, function(k, h) {
            e.each(h.superRegions, function(k, h) {
                h.drawObject(a, c, b.offSetX, b.offSetY);
                h.drawBonusText(a, b.offSetX, b.offSetY)
            })
        });
        this.regionsOverlay.toFront()
    };
    l.prototype.setRoundNumber = function(a) {
        this.round = parseInt(a, 10);
        0 === this.round ? this.roundNumber.attr({
            text: "Picking phase"
        }) : this.roundNumber.attr({
            text: "Round " + this.round
        })
    };
    l.prototype.showGameEnd = function(a) {
        a = "" !== a ? "Game end! " + a + " has won." : "Game end! Players have tied.";
        this.overlay.attr({
            opacity: 0.2
        }).toFront();
        this.gameEndText.attr({
            text: a,
            opacity: 1
        }).toFront()
    };
    l.prototype.drawArrow = function(a, c, b, k, h) {
        var d;
        a = this.regions[a];
        c = this.regions[c];
        d = a.armiesTextPosition.x + this.offSetX;
        var e =
            a.armiesTextPosition.y + this.offSetY,
            f = c.armiesTextPosition.x + this.offSetX,
            g = c.armiesTextPosition.y + this.offSetY,
            l = a = 0,
            r = d,
            m = e;
        c = Math.sqrt(Math.pow(f - d, 2) + Math.pow(g - e, 2)) - 50;
        d = 180 * Math.atan2(g - e, f - d) / Math.PI;
        r += 25 * Math.cos(d * Math.PI / 180);
        m += 25 * Math.sin(d * Math.PI / 180);
        a = c / 2 * Math.cos(d * Math.PI / 180);
        l = c / 2 * Math.sin(d * Math.PI / 180);
        k = this.canvas.path("M -9,-9 -9,9 -9,9 -9,18 11,0 -9,-18 -9,-9 z").attr({
            fill: k.color,
            "stroke-width": 2.2,
            stroke: "black",
            "stroke-linejoin": "round"
        });
        b = this.canvas.text(r, m, b).attr({
            "font-weight": "bold",
            "font-family": "Exo",
            "font-size": "17px"
        });
        this.arrowLayer = this.canvas.set().push(k, b);
        k.transform("t" + r + "," + m + "r" + d);
        k.animate({
            path: "M -9,-9 -9,9 " + (c - 9) + ",9 " + (c - 9) + ",18 " + (c + 11) + ",0 " + (c - 9) + ",-18 " + (c - 9) + ",-9 z"
        }, h);
        b.animate({
            transform: "t" + a + "," + l
        }, h)
    };
    l.prototype.drawBox = function(a, b, d, k) {
        var h, e, f, l = this.regions[a];
        a = l.armiesTextPosition.x + this.offSetX;
        l = l.armiesTextPosition.y + this.offSetY;
        h = this.canvas.text(1, 0, b).attr({
            "font-family": "Exo",
            "font-weight": "bold",
            "font-size": "17px",
            "text-anchor": "end"
        });
        b = h.getBBox().width;
        e = this.canvas.path("m -__textWidth15__,-13 0,26 c 0,0 0,3 3,3 3,0 __textWidth__,0 __textWidth__,0 0,0 3,0 3,-3 0,-3 0,-26 0,-26 0,0 0,-3 -3,-3 -3,0 -__textWidth__,0 -__textWidth__,0 0,0 -3,0 -3,3 z".replace(/__textWidth__/g, b + 5).replace(/__textWidth15__/g, b + 4.5));
        f = this.colors.neutral;
        d !== g && (f = d.color);
        e.attr({
            fill: f,
            stroke: "rgb(0, 0, 0)",
            "stroke-width": 2.2,
            "stroke-linejoin": "round"
        });
        h.toFront();
        d = this.canvas.set().push(h, e).attr({
            opacity: "0"
        });
        d.transform("t" + (a + b / 2) + "," + l);
        d.animate({
            transform: "t" + (a + b / 2) + "," + (l - 32),
            opacity: "1"
        }, k, "backout");
        this.boxSet === g && (this.boxSet = this.canvas.set());
        this.boxSet.push(d)
    };
    l.prototype.clearMap = function() {
        this.overlay.attr({
            opacity: 0
        }).toBack();
        this.gameEndText.attr({
            opacity: 0
        }).toBack();
        this.boxSet !== g && this.boxSet.remove();
        this.arrowLayer !== g && this.arrowLayer.remove()
    };
    l.prototype.update = function(a) {
        var b, d, k, h;
        for (d = 1; d < a.length - 1; d++) h = a[d].split(";"), k = h[0], b = this.colors[h[1]], -1 !== h[1].indexOf("player") && (b = this.colors.players[h[1].substr(h[1].length -
            1) - 1]), 0 === this.round ? -1 !== this.startingRegions.indexOf(k) && "neutral" === h[1] ? (h = " ", b = this.colors.starting) : h = "neutral" === h[1] && "2" == h[2] ? " " : h[2] : h = h[2], this.regions[k].setColor(b), this.regions[k].setArmiesText(h)
    };
    l.prototype.checkSuperRegions = function() {
        var a = 5,
            b = 5,
            d = this;
        this.legend[1].attr({
            fill: "black"
        });
        e.each(this.superRegions, function(k, h) {
            var n = !0,
                f = h.regions[0].drawnObject.attr("fill");
            if (f !== d.colors.players[0] && f !== d.colors.players[1]) return !0;
            e.each(h.regions, function(a, k) {
                if (k.drawnObject.attr("fill") !==
                    f) return n = !1
            });
            if (!n) return !0;
            f === d.colors.players[0] ? a += h.bonus : b += h.bonus;
            d.legend[1][h.id - 1].attr({
                fill: f
            })
        });
        this.playerArmies1.attr({
            text: a + " Armies/round"
        });
        this.playerArmies2.attr({
            text: b + " Armies/round"
        })
    };
    f.Map = l
})(window, document, window.Raphael, window.jQuery);
(function(a, m) {
    var b = a.setNamespace("app.competitions.warlight-ai-challenge-2"),
        e;
    e = function(a, b) {
        if (!1 === this instanceof e) return new e(a, b);
        this.armies = 5;
        this.color = b;
        this.name = a;
        this.history = {
            map: [],
            moves: []
        }
    };
    b.Player = e
})(window);
(function(a, m) {
    a.setNamespace("app.competitions.warlight-ai-challenge-2").ViewMode = {
        SHOW_ALL: "all",
        PLAYER_1: "0",
        PLAYER_2: "1"
    }
})(window);
(function(a, m) {
    var b = a.setNamespace("app.competitions.warlight-ai-challenge-2"),
        e = a.setNamespace("app.competitions.warlight-ai-challenge-2.MoveType"),
        g = a.setNamespace("app.competitions.warlight-ai-challenge-2.RegionStatus"),
        f;
    f = function(a, b) {
        if (!1 === this instanceof f) return new f(a, b);
        var g = a[0].substr(a[0].length - 1);
        this.amount = 0;
        this.moveType = a[1];
        this.player = b[g - 1];
        this.sourceRegion = parseInt(a[2], 10);
        this.targetRegion = -1;
        this.intendedMoveType = this.moveType;
        switch (this.moveType) {
            case e.ILLEGAL:
                this.intendedMoveType =
                    a[3];
                this.description = a.splice(4, a.length - 1).join(" ");
                break;
            case e.PLACE:
                this.amount = a[3];
                break;
            case e.ATTACK:
                this.targetRegion = parseInt(a[3], 10), this.amount = parseInt(a[4], 10)
        }
    };
    f.prototype.getAttackingArmies = function(a) {
        var b = this.amount;
        a <= b && 0 < a && (b = a - 1);
        return b
    };
    f.prototype.isAttack = function(a, b) {
        var e = !0,
            f, l;
        f = a[b - 1][this.sourceRegion].split(";");
        l = a[b - 1][this.targetRegion].split(";");
        if (f[1] === l[1] || f[1] === g.UNKNOWN && l[1] !== g.NEUTRAL) e = !1;
        return e
    };
    f.prototype.toString = function(a, b) {
        var f =
            "armies",
            g;
        1 === this.amount && (f = "army");
        switch (this.moveType) {
            case e.ILLEGAL:
                g = "__playerName__ cannot __moveType__: __regionName__ __description__".replace(/__moveType__/g, this.intendedMoveType).replace(/__description__/g, this.description);
                break;
            case e.PLACE:
                g = "__playerName__ places __amount__ __unit__ on __regionName__".replace(/__amount__/g, this.amount).replace(/__unit__/g, f);
                break;
            case e.TRANSFER:
                g = "__playerName__ transfers __amount__ __unit__ to __regionName__".replace(/__amount__/g, this.amount).replace(/__unit__/g,
                    f);
                break;
            case e.ATTACK:
                g = "__playerName__ attacks __regionName__ with __amount__ __unit__".replace(/__amount__/g, b).replace(/__unit__/g, f)
        }
        a == m && (a = "");
        return g = g.replace(/__playerName__/g, this.player.name).replace(/__regionName__/g, a)
    };
    b.Move = f
})(window);
(function(a, m, b) {
    b = a.setNamespace("app.competitions.warlight-ai-challenge-2");
    var e = a.setNamespace("app.competitions.warlight-ai-challenge-2.Move"),
        g = a.setNamespace("app.competitions.warlight-ai-challenge-2.MoveType"),
        f;
    f = function(a, b) {
        if (!1 === this instanceof f) return new f(a, b);
        this.boxHeight = 600;
        this.view = m(a);
        this.data = [];
        this.colors = b;
        this.view.css({
            height: this.boxHeight - 60 + "px"
        });
        this.selectedOption = 0
    };
    f.prototype.clear = function() {
        this.view.empty()
    };
    f.prototype.collapse = function() {
        1 <= this.view.css("opacity") &&
            (m("#textBox").removeClass("active"), this.view.animate({
                opacity: 0,
                height: "540px"
            }, 300, function() {
                m(this).css({
                    display: "none"
                })
            }))
    };
    f.prototype.expand = function() {
        var a = this.boxHeight + "px";
        0 >= this.view.css("opacity") && (m("#textBox").addClass("active"), this.view.css("display", "block"), this.view.animate({
            opacity: 1,
            height: a
        }, 300), this.view.scrollTop(19.17 * this.selectedOption))
    };
    f.prototype.toggle = function() {
        m("#textBox").hasClass("active") ? (this.collapse(), this.view.blur()) : this.expand()
    };
    f.prototype.fill =
        function(a, b) {
            var f = 0,
                m, l, s = null,
                c;
            this.view.empty();
            for (var p = 1; p < a.moves.length; p++) l = a.moves[p].split(" "), p >= a.moves.length - 1 ? (c = "Game end", l = !0) : 1 >= l.length ? (c = 0 == l[0] ? "Picking phase" : "Round " + l[0], l = !0) : (m = new e(l, b), s = m.moveType, c = "Region " + m.sourceRegion, l = !1, m.moveType === g.ATTACK && (c = "Region " + m.targetRegion, m.isAttack(a.map, p) ? (f = a.map[p - 1][m.sourceRegion].split(";"), f = m.getAttackingArmies(f[2])) : m.moveType = g.TRANSFER), c = m.toString(c, f)), m = document.createElement("option"), m.text = c, m.value =
                p, l && m.setAttribute("class", "option-bold"), s === g.ILLEGAL && (s = null, m.style.color = this.colors.illegal), this.view.append(m)
        };
    f.prototype.setSelected = function(a) {
        0 > a || null == a ? a = 0 : a >= this.view[0].length && (a = this.view[0].length - 1);
        this.view.val(a + 1);
        this.setMoveText(a)
    };
    f.prototype.setMoveText = function(a) {
        m("#moveText").val(this.view[0][a].text);
        this.selectedOption = a
    };
    b.MoveBox = f
})(window, jQuery);
(function(a, m, b, e) {
    var g = a.setNamespace("app.competitions.warlight-ai-challenge-2"),
        f = a.setNamespace("app.competitions.warlight-ai-challenge-2.Map"),
        d = a.setNamespace("app.competitions.warlight-ai-challenge-2.Player"),
        q = a.setNamespace("app.competitions.warlight-ai-challenge-2.ViewMode"),
        t = a.setNamespace("app.competitions.warlight-ai-challenge-2.MoveBox"),
        r = a.setNamespace("app.competitions.warlight-ai-challenge-2.Move"),
        l = a.setNamespace("app.competitions.warlight-ai-challenge-2.MoveType"),
        s = a.setNamespace("app.competitions.warlight-ai-challenge-2.RegionStatus"),
        c, p = {
            colors: {
                illegal: "#d41f15",
                neutral: "rgb(240, 222, 180)",
                unknown: "rgb(163, 134, 113)",
                starting: "rgb(255, 237, 209)",
                players: {
                    0: "rgb(192, 59, 43)",
                    1: "rgb(40, 128, 186)"
                }
            },
            game: {
                animationSpeed: 750
            },
            map: {
                width: 1515,
                height: 890,
                offSetX: 15,
                offSetY: 75,
                distorted: !0
            },
            boxHeight: 630
        };
    c = function() {
        if (!1 === this instanceof c) return new c;
        //var g = b("#gamediv").attr("data-players").split(",");
        var parts = getParameterByName("data-file").split("-")
        var g = [parts[0], parts[1]];
        var k, h, e,
            l = a.curry(this.handleMapLoaded, this);
        this.settings = p;
        this.players = [];
        this.round = 0;
        this.history = {
            moves: [],
            map: []
        };
        this.visible = {
            round: 0,
            move: 0,
            history: {
                moves: [],
                map: []
            }
        };
        this.moveBox = new t("#moveSelector", this.settings.colors);
        for (k = 0; k < g.length; k++) h = this.settings.colors.players[k], e = g[k], h = new d(e, h), this.players.push(h);
        this.indexGame = b("#gamediv").attr("data-indexgame");
        this.map = new f(this.settings.map.width, this.settings.map.height, this.settings.map.offSetX, this.settings.map.offSetY, this.settings.map.distorted, this.settings.colors);
        this.map.players = this.players;
        this.map.loadMap(this.indexGame);
        this.viewMode = q.player1;
        this.handleWindowResize();
        this.registerEventListeners();
        b(this.map).bind("mapLoadedEvent", l)
    };
    c.prototype.load = function() {
        
        var dataFile = getParameterByName("data-file");
        //var k = /*a.location.href+*/ "/results/" + dataFile;
        var mapIndex = getParameterByName("map");
        //var k ="/warlight/engine/play?map=" + mapIndex + "&bot1=runA.sh&bot2=runC.sh";
        var k = "/warlight/engine/view/" + dataFile;
        if ("" !== this.indexGame) k = "http://" + a.location.hostname + "/competitions/warlight-ai-challenge/games/" + this.indexGame + "/data";
        else if (7 > a.location.href.split("/").length) {
            console.log("Cannot find game for competition homepage");
            g.release();
            return
        }
        var c = a.curry(this.handleData, this);
        b.get(k, function(a) {
            c([a])
        }).fail(function(a, b, k) {
            console.log("data failed to load!");
            console.log(k)
        })
    };
    c.prototype.createHistory = function(a, b, c) {
        var e = 1,
            d = {
                map: [a[c].split(" ")],
                moves: [0]
            },
            f;
        for (c++; c < a.length;)
            if (f = a[c].split(" "), "map" === f[0]) c++;
            else {
                if ("round" === f[0]) d.map[e] = "1" === f[1] ? a[c - 1].split(" ") : d.map[e - 1], d.moves[e] = f[1];
                else if ("won" === f[1]) {
                    d.map[e] = d.map[e - 1];
                    d.moves[e] = f.join(" ");
                    c++;
                    break
                } else d.moves[e] = a[c], c++, d.map[e] = a[c].split(" ");
                c++;
                e++
            }
        b === q.SHOW_ALL ? this.history = d : this.players[b].history = d;
        return c
    };
    c.prototype.updateMap = function() {
        this.map.update(this.visible.history.map[this.visible.move]);
        this.map.checkSuperRegions()
    };
    c.prototype.setView = function(a) {
        if ("" === a || null === a || a === e || "keypress" === a.type) a = this.getNextViewMode();
        this.visible.history = a === q.SHOW_ALL ? this.history : this.players[a].history;
        this.viewMode = a;
        0 < this.visible.move && (this.visible.move > this.visible.history.moves.length - 1 && (this.visible.move = this.visible.history.moves.length - 1), this.setNewRoundIndex());
        this.fillMoveBox();
        this.drawMove()
    };
    c.prototype.fillMoveBox = function() {
        this.moveBox.collapse();
        this.moveBox.fill(this.visible.history,
            this.players);
        1 > this.visible.move && (this.visible.move = 1);
        this.moveBox.setSelected(this.visible.move - 1)
    };
    c.prototype.drawMove = function() {
        var b, c, d, e, f, g, p, q = this.settings.game.animationSpeed;
        d = !1;
        var u = !0;
        p = this.visible.history.moves[this.visible.move].split(" ");
        c = m.getElementById("moveText");
        g = this.visible.history.map;
        this.map.clearMap();
        c.style.color = "";
        c.style.fontSize = "";
        this.visible.move >= this.visible.history.moves.length - 1 ? (-1 !== p[0].indexOf("player") ? (c = p[0].substr(p[0].length - 1), b = this.players[c -
            1], this.map.showGameEnd(b.name)) : this.map.showGameEnd(""), this.pause()) : 1 >= p.length ? (this.visible.round = p[0], this.map.setRoundNumber(this.visible.round)) : (b = new r(p, this.players), b.moveType === l.ILLEGAL ? (c.style.fontSize = "13px", c.style.color = this.settings.colors.illegal, u = !1) : (b.moveType === l.PLACE ? this.map.drawBox(b.sourceRegion, "+" + b.amount, b.player, q) : b.moveType === l.ATTACK && (c = g[this.visible.move - 1][b.sourceRegion].split(";"), d = g[this.visible.move - 1][b.targetRegion].split(";"), e = g[this.visible.move][b.sourceRegion].split(";"),
            f = g[this.visible.move][b.targetRegion].split(";"), b.isAttack(g, this.visible.move) ? (g = b.getAttackingArmies(c[2]), p[0] === f[1] ? (p = g - f[2], f = d[2]) : (p = c[2] - e[2], f = d[2] - f[2]), this.map.drawArrow(b.sourceRegion, b.targetRegion, g, b.player, q), c[1] !== s.UNKNOWN && (c = c[1].substr(c[1].length - 1), c = this.players[c - 1], this.map.drawBox(b.sourceRegion, "-" + p, c, q)), d[1] !== s.UNKNOWN && (c = d[1].substr(d[1].length - 1), c = this.players[c - 1], this.map.drawBox(b.targetRegion, "-" + f, c, q))) : this.map.drawArrow(b.sourceRegion, b.targetRegion,
                b.amount, b.player, q)), this.visible.move--, this.updateMap(), this.visible.move++, d = !0));
        u && (d ? (u = a.curry(this.updateMap, this), this.delayTimer = a.setTimeout(u, this.settings.game.animationSpeed - 100)) : this.updateMap())
    };
    c.prototype.getNextViewMode = function() {
        b("#changeViewButtons").children().removeAttr("checked");
        switch (this.viewMode) {
            case q.SHOW_ALL:
                return b("#mapView_1").parent().attr("checked", !0), q.PLAYER_1;
            case q.PLAYER_1:
                return b("#mapView_2").parent().attr("checked", !0), q.PLAYER_2;
            case q.PLAYER_2:
                return b("#mapView_all").parent().attr("checked", !0), q.SHOW_ALL;
            default:
                return b("#mapView_1").parent().attr("checked", !0), q.PLAYER_1
        }
    };
    c.prototype.setNewRoundIndex = function() {
        for (var a = !0;;)
            if (a) {
                if (1 >= this.visible.history.moves[this.visible.move].split(" ").length)
                    if (1 * this.visible.history.moves[this.visible.move] < this.visible.round) this.visible.move++, a = !1;
                    else if (1 * this.visible.history.moves[this.visible.move] == this.visible.round || 1 >= this.visible.move) break;
                this.visible.move--
            } else {
                if (1 >= this.visible.history.moves[this.visible.move].split(" ").length &&
                    1 * this.visible.history.moves[this.visible.move] == this.visible.round || this.visible.move >= this.visible.history.moves.length - 1) break;
                this.visible.move++
            }
    };
    c.prototype.getRoundIndex = function(a) {
        for (var b, c = this.visible.move, d = this.visible.history.moves, f = 0; 0 <= c && c < d.length;)
            if (a < this.visible.round ? c-- : c++, 0 !== d[c] && d[c] !== e && (b = d[c].split(" "), 1 >= b.length || c === d.length - 1)) {
                f = c;
                break
            }
        return f
    };
    c.prototype.moveBackward = function() {
        var b;
        null !== this.delayTimer && a.clearTimeout(this.delayTimer);
        1 < this.visible.move &&
            (this.visible.move -= 2, this.updateMap(), this.visible.move++, b = this.visible.history.moves[this.visible.move + 1], 1 >= b.split(" ").length && this.map.setRoundNumber(this.visible.round - 1));
        this.moveBox.setSelected(this.visible.move - 1);
        this.drawMove()
    };
    c.prototype.moveForward = function() {
        null !== this.delayTimer && a.clearTimeout(this.delayTimer);
        this.visible.move < this.visible.history.moves.length - 1 && this.visible.move++;
        this.moveBox.setSelected(this.visible.move - 1);
        this.drawMove()
    };
    c.prototype.roundBackward = function() {
        null !==
            this.delayTimer && a.clearTimeout(this.delayTimer);
        this.visible.move = 1 < this.visible.round ? this.getRoundIndex(this.visible.round - 1) : 1;
        this.moveBox.setSelected(this.visible.move - 1);
        this.drawMove()
    };
    c.prototype.roundForward = function() {
        var b;
        null !== this.delayTimer && a.clearTimeout(this.delayTimer);
        this.visible.move < this.visible.history.moves.length - 1 && (b = this.getRoundIndex(this.visible.round + 1), 0 < b && (this.visible.move = b, this.moveBox.setSelected(this.visible.move - 1), this.drawMove()))
    };
    c.prototype.pause = function() {
        if (null !==
            this.timer || this.timer !== e) a.clearTimeout(this.timer), this.timer = null, b("#playButton").removeClass("paused").addClass("playing")
    };
    c.prototype.play = function() {
        var c = this;
        (function(b) {
            var d = function() {
                return function() {
                    c.timer = a.setTimeout(d, sliderValue);
                    b()
                }
            }(0);
            c.timer = a.setTimeout(d, sliderValue)
        })(a.curry(this.handleTimer, this));
        b("#playButton").removeClass("playing").addClass("paused");
        this.moveForward()
    };
    c.prototype.setSliderPosition = function() {
        b("#horizontal_slider").css("left", 120 - 0.06 * (sliderValue -
            500) + "px")
    };
    c.prototype.togglePlayback = function() {
        null === this.timer && this.visible.move < this.visible.history.moves.length - 1 ? this.play() : this.pause()
    };
    c.prototype.resetGameSpeed = function() {
        sliderValue = 1500;
        this.setSliderPosition()
    };
    c.prototype.increaseGameSpeed = function() {
        500 < sliderValue && (sliderValue -= 200);
        this.setSliderPosition()
    };
    c.prototype.reduceGameSpeed = function() {
        2500 > sliderValue && (sliderValue += 200);
        this.setSliderPosition()
    };
    c.prototype.registerEventListeners = function() {
        var c = a.curry(this.moveBox.collapse,
                this.moveBox),
            d = a.curry(this.handleKeyDown, this),
            e = a.curry(this.moveBackward, this),
            f = a.curry(this.moveForward, this),
            g = a.curry(this.roundBackward, this),
            l = a.curry(this.roundForward, this),
            p = a.curry(this.moveBox.collapse, this.moveBox),
            q = a.curry(this.moveBox.expand, this.moveBox),
            r = a.curry(this.moveBox.toggle, this.moveBox),
            s = a.curry(this.togglePlayback, this),
            t = a.curry(this.setView, this),
            v = a.curry(this.increaseGameSpeed, this),
            w = a.curry(this.reduceGameSpeed, this),
            x = a.curry(this.resetGameSpeed, this),
            y = a.curry(this.handleViewSelected,
                this),
            z = a.curry(this.handleMoveBoxClick, this),
            A = a.curry(this.handleMoveSelected, this),
            B = a.curry(this.handlePlayPauseButtonClick, this),
            C = a.curry(this.handleMoveBackwardButtonClick, this),
            D = a.curry(this.handleMoveForwardButtonClick, this),
            E = a.curry(this.handleRoundBackwardButtonClick, this),
            F = a.curry(this.handleRoundForwardButtonClick, this),
            G = a.curry(this.handleWindowResize, this),
            H = a.curry(this.moveTooltip, this);
        b("#skipbackwardButton").click(E);
        b("#backwardButton").click(C);
        b("#playButton").click(B);
        b("#forwardButton").click(D);
        b("#skipforwardButton").click(F);
        b("#moveText").click(z);
        b("#moveSelector").on("click", "option", A);
        b("#changeViewButtons").on("change", "input", y);
        Mousetrap.bind("shift+left", g);
        Mousetrap.bind("left", e);
        Mousetrap.bind("space", s);
        Mousetrap.bind("right", f);
        Mousetrap.bind("shift+right", l);
        Mousetrap.bind("up", q);
        Mousetrap.bind("down", p);
        Mousetrap.bind("enter", r);
        Mousetrap.bind("v", t);
        Mousetrap.bind("-", w);
        Mousetrap.bind("+", v);
        Mousetrap.bind("=", x);
        b(m).on("click", c);
        b(m).on("keydown",
            d);
        b("#gamediv").on("mousemove", H);
        b(a).on("resize", G)
    };
    c.prototype.releaseEventListeners = function() {
        var c = a.curry(this.moveBox.collapse, this.moveBox),
            d = a.curry(this.handleWindowResize, this);
        a.curry(this.handleKeyDown, this);
        a.curry(this.handleMapLoaded, this);
        b("#skipbackwardButton").off("click");
        b("#backwardButton").off("click");
        b("#playButton").off("click");
        b("#forwardButton").off("click");
        b("#skipforwardButton").off("click");
        b("#moveText").off("click");
        b("#moveSelector").off("click", "option");
        b("#changeViewButtons").off("change",
            "input");
        Mousetrap.unbind("shift+left");
        Mousetrap.unbind("left");
        Mousetrap.unbind("space");
        Mousetrap.unbind("right");
        Mousetrap.unbind("shift+right");
        Mousetrap.unbind("up");
        Mousetrap.unbind("down");
        Mousetrap.unbind("enter");
        Mousetrap.unbind("v");
        Mousetrap.unbind("-");
        Mousetrap.unbind("+");
        Mousetrap.unbind("=");
        b(m).off("click", c);
        b(m).off("keydown");
        b("#gamediv").off("mousemove");
        b(a).off("resize", d)
    };
    c.prototype.handleMapLoaded = function() {
        this.load()
    };
    c.prototype.handleData = function(a) {
        var b = a[0].split("\n") ||
            a.split("\n"),
            c = [],
            d = 0;
        a = b[0].split(" ");
        "map" !== a[0] && (c = a, d = 1);
        this.map.startingRegions = c;
        for (var e in q) this.createHistory(b, q[e], d);
        // d = this.createHistory(b, "all", d);
        this.setView(this.viewMode);
        this.updateMap();
        this.play()
    };
    c.prototype.handleKeyDown = function(a) {
        var b = !0;
        switch (a.which) {
            case 32:
            case 37:
            case 38:
            case 39:
            case 40:
                a.preventDefault(), b = !1
        }
        return b
    };
    c.prototype.handleMoveBackwardButtonClick = function(a) {
        a.target.blur();
        this.moveBackward()
    };
    c.prototype.handleMoveForwardButtonClick = function(a) {
        a.target.blur();
        this.moveForward()
    };
    c.prototype.handleRoundBackwardButtonClick = function(a) {
        a.target.blur();
        this.roundBackward()
    };
    c.prototype.handleRoundForwardButtonClick = function(a) {
        a.target.blur();
        this.roundForward()
    };
    c.prototype.handlePlayPauseButtonClick = function(a) {
        a.target.blur();
        this.togglePlayback()
    };
    c.prototype.handleTimer = function() {
        this.visible.move < this.visible.history.moves.length - 1 ? (this.settings.game.animationSpeed = sliderValue / 2, this.moveForward()) : this.pause()
    };
    c.prototype.handleMoveBoxClick = function(a) {
        a.target.blur();
        a.stopPropagation();
        this.moveBox.toggle()
    };
    c.prototype.handleMoveSelected = function(a) {
        a.delegateTarget.blur();
        a = b(a.target).val();
        this.visible.move = a;
        this.moveBox.setMoveText(a - 1);
        a = this.getRoundIndex(this.visible.round - 1);
        a = this.visible.history.moves[a];
        this.map.setRoundNumber(a);
        this.visible.round = a;
        this.visible.round--;
        this.updateMap();
        this.visible.round++;
        this.drawMove()
    };
    c.prototype.handleViewSelected = function(a, c) {
        var d = b(a.target);
        d.parent().attr("checked", !0);
        d.parent().siblings().removeAttr("checked");
        this.setView(d.val(), c)
    };
    c.prototype.handleWindowResize = function() {
        var c, d, e;
        c = b("#game").width() - 30;
        d = a.innerHeight - 80;
        "" === this.indexGame && (c = c < this.settings.map.width && 1E3 < c ? c / this.settings.map.width : c > this.settings.map.width ? 1 : 1E3 / this.settings.map.width, d = d < this.settings.map.height && 588 < d ? d / this.settings.map.height : d > this.settings.map.height ? 1 : 588 / this.settings.map.height, e = "scale(__scale__)".replace(/__scale__/g, Math.min(c, d)), b("#wrapper").css("-moz-transform", e).css("-o-transform", e).css("-webkit-transform",
            e).css("transform", e), "scale(1)" !== e ? (c = d < c ? (b("#game").width() - d * this.settings.map.width) / 2 : 15, b("#wrapper").css("margin-left", c + "px")) : b("#wrapper").css("margin-left", "auto"))
    };
    c.prototype.moveTooltip = function(a) {
        if (0 === b("#game-teaser").length) {
            var c = b("div.tooltip"),
                d = a.offsetX == e ? a.originalEvent.layerX : a.offsetX;
            a = a.offsetY == e ? a.originalEvent.layerY : a.offsetY;
            var f = d + 22,
                g = a + 12;
            f + c.width() + 10 > this.settings.map.width && (f = d - 33 - c.width());
            g + c.height() + 60 > this.settings.map.height && (g = a - 12 - c.height());
            c.css({
                left: f,
                top: g
            })
        }
    };
    g.release = function() {
        g.game instanceof c && (a.clearTimeout(g.game.delayTimer), g.game.pause(), g.game.releaseEventListeners(), g.game = e)
    };
    g.initialize = function() {
        g.game instanceof c && g.release();
        g.game = new c
    };
    g.Game = c
})(window, document, window.jQuery);
//# sourceURL=http://localhost:3000/js/competitions/warlight-ai-challenge-2.min.js